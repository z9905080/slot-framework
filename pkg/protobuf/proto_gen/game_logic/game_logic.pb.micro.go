// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: game_logic.proto

package proto_game_logic

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GameLogicService service

func NewGameLogicServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GameLogicService service

type GameLogicService interface {
	GameInit(ctx context.Context, in *GameInitRequest, opts ...client.CallOption) (*GameInitResponse, error)
}

type gameLogicService struct {
	c    client.Client
	name string
}

func NewGameLogicService(name string, c client.Client) GameLogicService {
	return &gameLogicService{
		c:    c,
		name: name,
	}
}

func (c *gameLogicService) GameInit(ctx context.Context, in *GameInitRequest, opts ...client.CallOption) (*GameInitResponse, error) {
	req := c.c.NewRequest(c.name, "GameLogicService.GameInit", in)
	out := new(GameInitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GameLogicService service

type GameLogicServiceHandler interface {
	GameInit(context.Context, *GameInitRequest, *GameInitResponse) error
}

func RegisterGameLogicServiceHandler(s server.Server, hdlr GameLogicServiceHandler, opts ...server.HandlerOption) error {
	type gameLogicService interface {
		GameInit(ctx context.Context, in *GameInitRequest, out *GameInitResponse) error
	}
	type GameLogicService struct {
		gameLogicService
	}
	h := &gameLogicServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GameLogicService{h}, opts...))
}

type gameLogicServiceHandler struct {
	GameLogicServiceHandler
}

func (h *gameLogicServiceHandler) GameInit(ctx context.Context, in *GameInitRequest, out *GameInitResponse) error {
	return h.GameLogicServiceHandler.GameInit(ctx, in, out)
}
